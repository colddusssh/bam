from config import BOT_TOKEN

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import MenuButtonWebApp, WebAppInfo
import sqlite3
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token =BOT_TOKEN)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (—Ç–µ–ø–µ—Ä—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π)
def init_db():
    try:
        conn = sqlite3.connect("database.db", check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_notes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                text TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.commit()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}")
    finally:
        conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    try:
        await bot.set_chat_menu_button(
            chat_id=message.chat.id,
            menu_button=MenuButtonWebApp(
                text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
                web_app=WebAppInfo(url="https://colddusssh.github.io/bam/")  # –ó–∞–º–µ–Ω–∏—Ç–µ URL!
            )
        )
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App
@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    try:
        user_id = message.from_user.id
        text = message.web_app_data.data
        
        conn = sqlite3.connect("database.db", check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO user_notes (user_id, text) VALUES (?, ?)",
            (user_id, text)
        )
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute(
            "SELECT text, created_at FROM user_notes WHERE user_id = ? ORDER BY id DESC LIMIT 1",
            (user_id,)
        )
        last_note = cursor.fetchone()
        conn.close()
        
        if last_note:
            await message.answer(
                f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
                f"üìÑ –¢–µ–∫—Å—Ç: {last_note[0]}\n"
                f"‚è∞ –í—Ä–µ–º—è: {last_note[1]}"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

# –ó–∞–ø—É—Å–∫
async def main():
    init_db()
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())