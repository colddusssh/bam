from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import MenuButtonWebApp, WebAppInfo
import asyncio

bot = Bot(token="YOUR_BOT_TOKEN")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: types.Message):
    try:
        await bot.set_chat_menu_button(
            chat_id=message.chat.id,
            menu_button=MenuButtonWebApp(
                text="üìù –û—Ç–∫—Ä—ã—Ç—å Mini App",
                web_app=WebAppInfo(url="https://your-vercel-app.vercel.app")  # –í–∞—à URL
            )
        )
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    user_id = message.from_user.id
    text = message.web_app_data.data
    
    # –í–º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î - –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    print("\n" + "="*30)
    print(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    print(f"–¢–µ–∫—Å—Ç: {text}")
    print(f"–í—Ä–µ–º—è: {message.date}")  # –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    print("="*30 + "\n")
    
    await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())